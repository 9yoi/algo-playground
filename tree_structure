//Binary Search Tree

function BST (val) {
  this.value = val;
  this.left = null;
  this.right = null;
}


/*
Check val against this.valu to decide whether to move left or right
If left/right === null, insert new node
Else move left/right and call function again
*/

BST.prototype.push = function (val) {

  if (val < this.value) {
    if (this.left === null) {
      this.left = new BST (val);
    } else {
      this.left.push(val)
    }
  } else if (val >= this.value) {
    if (this.right === null) {     
      this.right = new BST (val);
    } else {
      this.right.push(val)
    }
  }
}

BST.prototype.contains = function (target) {
  if (this.value === target) {
    return true;
  } else if (target < this.value) {
    return !!(this.left && this.left.contains(target));
  } else if (target > this.value) {
    return !!(this.right && this.right.contains(target));
  }
}
  
BST.prototype.depthFirstLog = function (cb) {
  cb(this.value);
  if (this.left) {
    this.left.depthFirstLog(callBack);
  }
  if (this.right) {
    this.right.depthFirstLog(callBack);
  }
}


var bst = new BST (1);
bst.push(5);
bst.push(1);
bst.push(6);
bst.push(5);
console.log(JSON.stringify(bst));
console.log(bst.contains(3));
