/*
NOTES:

== BASIC STRUCTURE ==

var LinkedList = function () {
  this.head = null;
  this.tail = null;
}

var Node = function (value) {
  this.value = value;
  this.next = null;
  this.previous = null; //for doubly-linked
}

== BASE CASE ==
//if there is nothing in linkedlist
if (!head) {  
  return head
}

- while (node)
- while (head)

== METHODS ==

LinkedList.prototype.MethodName = function () {
  
}

- INSTANTIATE
  - var list = new LinkedList();

- ADD NODE 
  - if there is no head, add node to head
  - link tail.next to new node
  - always update tail to new node
  - 

  var newNode = new Node(val);
  if (! list.head) {
    list.head = newNode;
  }
  ...


- REMOVE HEAD
  - update current head to head.next
  - return old head

- REMOVE NODE
  - PrevNode.next = node.next
  - Node.next.prev = node.prev

- CONTAINS
  - set node to head
  - while (node)
    - look for node.val === target ==> return true
    - keep updating node to node.next
  - if not found return false;

  - always rmb to update head and tail

  TECHNIQUES
  - Runner (P1 moves node.next, P2 moves node.next.next)
  - Recursion



*/